One question here is how to compare two lists of letter frequencies to find the best match. You can measure the difference between the two lists; for this, use the sum of the squares of the differences of the corresponding elements in the lists. If you minimize this sum by trying different rotations, you are doing what is called a least squares fit. Note that each letter frequency is the quotient of the number of times that letter was seen divided by the total number of letters examined.
 
Since each method above represents a step for the program to do its work, you can develop the program in an incremental fashion; that is, define one method, test it, and if it works correctly, move on to the next method. A minor error may produce a quite different result for a program like this. Incremental development is an effective way to ensure a correct program.
 
In addition to the file LetFreq.txt, you can find the program, including Cipher.java, CipherTest.java, and a sample data file data.txt, from directory Files for Project 1 F15 on the instructors website, which is provided for you to prepare your test data. You should use it to generate an encrypted file from a file that you create for testing purposes, run your program with the encrypted file as input, and then compare the output file of your program to the original file. Test your program twice, one with a file that contains only two or three lines of text and the other with a file that contains more than a page of text.
 
When your program runs correctly, make a hardcopy of your source code as well as two sets of test data and results for submission.
